/**
 * GPX Export Module
 * Exports route data as a GPX file with coordinates, elevation, timestamps, and run details
 */

class GPXExport {
    /**
     * Generate GPX XML string from route data and run details
     * @param {Array} coordinates - Array of [lat, lng] coordinates
     * @param {Array} elevations - Array of elevation values
     * @param {Array} timestamps - Array of ISO timestamp strings
     * @param {Object} options - Metadata options (name, desc, etc.)
     * @returns {string} GPX XML string
     */
    static generateGPX(coordinates, elevations = [], timestamps = [], options = {}) {
        // Get run details from sidebar if available
        const runName = document.getElementById('runName')?.value || options.name || 'Route';
        const runDesc = document.getElementById('runDesc')?.value || options.desc || 'Generated by Route Generator';
        const runDate = document.getElementById('runDate')?.value;
        const runStartTime = document.getElementById('runStartTime')?.value;
        const activityType = document.getElementById('activityTypeToggle')?.checked ? 'Bike' : 'Run';
        const includeHR = document.getElementById('includeHR')?.checked;
        const avgPace = document.getElementById('avgPace')?.value;
        const paceInconsistency = document.getElementById('paceInconsistency')?.value;

        // Compose start time
        let startTime = new Date();
        if (runDate && runStartTime) {
            startTime = new Date(`${runDate}T${runStartTime}`);
        }

        let gpx = `<?xml version="1.0" encoding="UTF-8"?>\n`;
        gpx += `<gpx version="1.1" creator="Route Generator" xmlns="http://www.topografix.com/GPX/1/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd">\n`;
        gpx += `  <metadata>\n    <name>${runName}</name>\n    <desc>${runDesc}</desc>\n    <type>${activityType}</type>\n    <time>${startTime.toISOString()}</time>\n  </metadata>\n`;
        gpx += `  <trk>\n    <name>${runName}</name>\n    <type>${activityType}</type>\n    <trkseg>\n`;

        for (let i = 0; i < coordinates.length; i++) {
            const [lat, lng] = coordinates[i];
            const ele = elevations[i] !== undefined ? `<ele>${elevations[i].toFixed(1)}</ele>` : '';
            const time = timestamps[i] ? `<time>${timestamps[i]}</time>` : '';
            let extensions = '';
            // Optionally add heart rate and pace extensions
            if (includeHR) {
                // Simulate HR: 140-160 for run, 120-140 for bike, with some random variation
                const baseHR = activityType === 'Run' ? 150 : 130;
                const hr = Math.round(baseHR + (Math.random() - 0.5) * 10);
                extensions += `<extensions><gpxtpx:TrackPointExtension><gpxtpx:hr>${hr}</gpxtpx:hr></gpxtpx:TrackPointExtension></extensions>`;
            }
            if (paceInconsistency && avgPace) {
                // Simulate pace variation if desired (not a GPX standard, but can be custom)
                // Could be added as a comment or extension
                // For now, just add as a comment
                extensions += `<!-- pace: ${avgPace}, inconsistency: ${paceInconsistency}% -->`;
            }
            gpx += `      <trkpt lat="${lat}" lon="${lng}">${ele}${time}${extensions}</trkpt>\n`;
        }

        gpx += `    </trkseg>\n  </trk>\n</gpx>`;
        return gpx;
    }

    /**
     * Download GPX file
     * @param {string} gpxString - GPX XML string
     * @param {string} filename - Filename for download
     */
    static downloadGPX(gpxString, filename = 'route.gpx') {
        Utils.downloadFile(gpxString, filename, 'application/gpx+xml');
    }
}

window.GPXExport = GPXExport; 